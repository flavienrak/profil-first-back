generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int     @id @default(autoincrement())
  name             String
  email            String  @unique
  password         String
  acceptConditions Boolean @default(false)
  role             String  @default("user")
  qualiCarriere    String  @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  files                    File[]
  cvMinutes                CvMinute[]
  qualiCarriereQuestions   QualiCarriereQuestion[]
  qualiCarriereResponses   QualiCarriereResponse[]
  openaiResponses          OpenaiResponse[]
  qualiCarriereChat        QualiCarriereChat[]
  qualiCarriereResumes     QualiCarriereResume[]
  qualiCarriereCompetences QualiCarriereCompetence[]
}

model File {
  id            Int    @id @default(autoincrement())
  name          String
  originalName  String
  extension     String
  usage         String
  userId        Int
  cvMinuteId    Int?
  sectionInfoId Int?   @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  cvMinute    CvMinute?    @relation(fields: [cvMinuteId], references: [id])
  sectionInfo SectionInfo? @relation(fields: [sectionInfoId], references: [id])
}

model CvMinute {
  id               Int     @id @default(autoincrement())
  name             String  @default("CV")
  position         String
  primaryBg        String  @default("#2A7F8B")
  secondaryBg      String  @default("#1A5F6B")
  tertiaryBg       String  @default("#BEDBFF")
  userId           Int
  visible          Boolean @default(true)
  qualiCarriereRef Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  files            File[]
  advices          Advice[]
  cvMinuteSections CvMinuteSection[]
  openaiResponses  OpenaiResponse[]
  evaluation       Evaluation?
}

model Section {
  id       Int     @id @default(autoincrement())
  name     String  @unique
  editable Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cvMinuteSections CvMinuteSection[]
}

model CvMinuteSection {
  id           Int     @id @default(autoincrement())
  sectionOrder Int?
  sectionTitle String?
  cvMinuteId   Int
  sectionId    Int

  cvMinute CvMinute @relation(fields: [cvMinuteId], references: [id], onDelete: Cascade)
  section  Section  @relation(fields: [sectionId], references: [id])

  advices      Advice[]
  sectionInfos SectionInfo[]

  @@unique([cvMinuteId, sectionId])
}

model SectionInfo {
  id                Int     @id @default(autoincrement())
  order             Int?
  content           String
  title             String?
  company           String?
  date              String?
  contrat           String?
  icon              String?
  iconSize          Int?
  cvMinuteSectionId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  file                     File?
  advices                  Advice[]
  evaluation               Evaluation?
  cvMinuteSection          CvMinuteSection           @relation(fields: [cvMinuteSectionId], references: [id], onDelete: Cascade)
  qualiCarriereQuestions   QualiCarriereQuestion[]
  qualiCarriereResponses   QualiCarriereResponse[]
  qualiCarriereResumes     QualiCarriereResume[]
  qualiCarriereCompetences QualiCarriereCompetence[]
}

model Advice {
  id                Int    @id @default(autoincrement())
  type              String
  content           String
  cvMinuteId        Int?
  sectionInfoId     Int?
  cvMinuteSectionId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cvMinute        CvMinute?        @relation(fields: [cvMinuteId], references: [id], onDelete: Cascade)
  sectionInfo     SectionInfo?     @relation(fields: [sectionInfoId], references: [id], onDelete: Cascade)
  cvMinuteSection CvMinuteSection? @relation(fields: [cvMinuteSectionId], references: [id], onDelete: Cascade)
}

model Evaluation {
  id            Int     @id @default(autoincrement())
  initialScore  Int
  actualScore   Int?
  content       String
  weakContent   String?
  cvMinuteId    Int?    @unique
  sectionInfoId Int?    @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cvMinute    CvMinute?    @relation(fields: [cvMinuteId], references: [id], onDelete: Cascade)
  sectionInfo SectionInfo? @relation(fields: [sectionInfoId], references: [id], onDelete: Cascade)
}

model OpenaiResponse {
  id         Int    @id @default(autoincrement())
  responseId String
  cvMinuteId Int?
  userId     Int?
  request    String
  response   String
  index      Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cvMinute CvMinute? @relation(fields: [cvMinuteId], references: [id], onDelete: Cascade)
  user     User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model QualiCarriereQuestion {
  id            Int    @id @default(autoincrement())
  order         Int
  content       String
  sectionInfoId Int
  userId        Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  sectionInfo           SectionInfo            @relation(fields: [sectionInfoId], references: [id], onDelete: Cascade)
  qualiCarriereResponse QualiCarriereResponse?
}

model QualiCarriereResponse {
  id            Int    @id @default(autoincrement())
  content       String
  questionId    Int    @unique
  sectionInfoId Int
  userId        Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  qualiCarriereQuestion QualiCarriereQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user                  User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  SectionInfo           SectionInfo?          @relation(fields: [sectionInfoId], references: [id], onDelete: Cascade)
}

model QualiCarriereResume {
  id            Int    @id @default(autoincrement())
  content       String
  sectionInfoId Int
  userId        Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sectionInfo SectionInfo @relation(fields: [sectionInfoId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model QualiCarriereCompetence {
  id            Int    @id @default(autoincrement())
  content       String
  sectionInfoId Int
  userId        Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sectionInfo SectionInfo @relation(fields: [sectionInfoId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model QualiCarriereChat {
  id      Int    @id @default(autoincrement())
  role    String
  content String
  userId  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
