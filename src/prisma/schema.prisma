generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "debian-openssl-1.1.x"]
  output        = "../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int     @id @default(autoincrement())
  name             String
  email            String  @unique
  password         String
  acceptConditions Boolean @default(false)
  role             String  @default("user")
  qualiCarriere    String  @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  files                     File[]
  cvMinutes                 CvMinute[]
  cvMinuteDomains           CvMinuteDomain[]
  qualiCarriereQuestions    QualiCarriereQuestion[]
  qualiCarriereResponses    QualiCarriereResponse[]
  openaiResponses           OpenaiResponse[]
  qualiCarriereChat         QualiCarriereChat[]
  qualiCarriereResumes      QualiCarriereResume[]
  qualiCarriereCompetences  QualiCarriereCompetence[]
  cvThequeCriteres          CvThequeCritere[]
  cvThequeUsers             CvThequeUser[]
  userCvThequeContacts      CvThequeContact[]         @relation("UserCvThequeContact")
  recruiterCvThequeContacts CvThequeContact[]         @relation("RecruiterCvThequeContact")
  cvThequeContactViews      CvThequeContactView[]
}

model File {
  id                Int    @id @default(autoincrement())
  name              String
  originalName      String
  extension         String
  usage             String
  userId            Int
  cvMinuteId        Int?
  cvMinuteSectionId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  cvMinute        CvMinute?        @relation(fields: [cvMinuteId], references: [id])
  cvMinuteSection CvMinuteSection? @relation(fields: [cvMinuteSectionId], references: [id])
}

model CvMinute {
  id                Int     @id @default(autoincrement())
  name              String  @default("CV")
  position          String
  primaryBg         String  @default("#2A7F8B")
  secondaryBg       String  @default("#1A5F6B")
  tertiaryBg        String  @default("#BEDBFF")
  visible           Boolean @default(true)
  qualiCarriereRef  Boolean @default(false)
  generated         String?
  score             Int     @default(0)
  userId            Int
  cvThequeCritereId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  cvThequeCritere CvThequeCritere? @relation(fields: [cvThequeCritereId], references: [id], onDelete: Cascade)

  files            File[]
  advices          Advice[]
  cvMinuteSections CvMinuteSection[]
  openaiResponses  OpenaiResponse[]
  evaluation       Evaluation?
  cvThequeViews    CvThequeView[]
  cvMinuteDomains  CvMinuteDomain[]
  cvThequeContacts CvThequeContact[]
}

model CvMinuteDomain {
  id         Int    @id @default(autoincrement())
  content    String
  cvMinuteId Int
  userId     Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  cvMinute CvMinute @relation(fields: [cvMinuteId], references: [id], onDelete: Cascade)
}

model CvMinuteSection {
  id         Int     @id @default(autoincrement())
  name       String
  order      Int     @default(1)
  editable   Boolean @default(false)
  content    String
  title      String?
  company    String?
  date       String?
  contrat    String?
  icon       String?
  iconSize   Int?
  cvMinuteId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  files                    File[]
  advices                  Advice[]
  evaluation               Evaluation?
  qualiCarriereQuestions   QualiCarriereQuestion[]
  qualiCarriereResponses   QualiCarriereResponse[]
  qualiCarriereResumes     QualiCarriereResume[]
  qualiCarriereCompetences QualiCarriereCompetence[]
  CvMinute                 CvMinute                  @relation(fields: [cvMinuteId], references: [id])
  OpenaiResponse           OpenaiResponse[]
}

model Advice {
  id                Int    @id @default(autoincrement())
  type              String
  content           String
  cvMinuteId        Int?
  cvMinuteSectionId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cvMinute        CvMinute?        @relation(fields: [cvMinuteId], references: [id], onDelete: Cascade)
  cvMinuteSection CvMinuteSection? @relation(fields: [cvMinuteSectionId], references: [id])
}

model Evaluation {
  id                Int     @id @default(autoincrement())
  initialScore      Int
  actualScore       Int?
  content           String
  weakContent       String?
  cvMinuteId        Int?    @unique
  cvMinuteSectionId Int?    @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cvMinute        CvMinute?        @relation(fields: [cvMinuteId], references: [id], onDelete: Cascade)
  cvMinuteSection CvMinuteSection? @relation(fields: [cvMinuteSectionId], references: [id])
}

model OpenaiResponse {
  id                Int    @id @default(autoincrement())
  responseId        String
  request           String
  response          String
  index             Int
  cvMinuteId        Int?
  userId            Int?
  cvThequeCritereId Int?
  cvMinuteSectionId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cvMinute        CvMinute?        @relation(fields: [cvMinuteId], references: [id], onDelete: Cascade)
  user            User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  cvThequeCritere CvThequeCritere? @relation(fields: [cvThequeCritereId], references: [id], onDelete: Cascade)
  cvMinuteSection CvMinuteSection? @relation(fields: [cvMinuteSectionId], references: [id])
}

model QualiCarriereQuestion {
  id                Int    @id @default(autoincrement())
  order             Int
  content           String
  userId            Int
  cvMinuteSectionId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  cvMinuteSection       CvMinuteSection?       @relation(fields: [cvMinuteSectionId], references: [id])
  qualiCarriereResponse QualiCarriereResponse?
}

model QualiCarriereResponse {
  id                Int    @id @default(autoincrement())
  content           String
  questionId        Int    @unique
  userId            Int
  cvMinuteSectionId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  qualiCarriereQuestion QualiCarriereQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user                  User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  cvMinuteSection       CvMinuteSection?      @relation(fields: [cvMinuteSectionId], references: [id])
}

model QualiCarriereResume {
  id                Int    @id @default(autoincrement())
  content           String
  userId            Int
  cvMinuteSectionId Int    @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  cvMinuteSection CvMinuteSection? @relation(fields: [cvMinuteSectionId], references: [id])
}

model QualiCarriereCompetence {
  id                Int    @id @default(autoincrement())
  content           String
  userId            Int
  cvMinuteSectionId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  cvMinuteSection CvMinuteSection? @relation(fields: [cvMinuteSectionId], references: [id])
}

model QualiCarriereChat {
  id      Int    @id @default(autoincrement())
  role    String
  content String
  userId  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CvThequeCritere {
  id           Int     @id @default(autoincrement())
  position     String
  domain       String
  description  String  @default("")
  diplome      String  @default("")
  localisation String  @default("")
  distance     Int     @default(0)
  experience   Int?
  evaluation   Int     @default(0)
  saved        Boolean @default(false)
  userId       Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  cvThequeCompetences CvThequeCompetence[]
  cvThequeViews       CvThequeView[]
  cvThequeUsers       CvThequeUser[]
  cvMinutes           CvMinute[]
  openaiResponses     OpenaiResponse[]
}

model CvThequeCompetence {
  id                Int    @id @default(autoincrement())
  content           String
  cvThequeCritereId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cvThequeCritere CvThequeCritere @relation(fields: [cvThequeCritereId], references: [id], onDelete: Cascade)
}

model CvThequeView {
  id                Int @id @default(autoincrement())
  count             Int
  cvMinuteId        Int @unique
  cvThequeCritereId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cvMinute        CvMinute        @relation(fields: [cvMinuteId], references: [id], onDelete: Cascade)
  cvThequeCritere CvThequeCritere @relation(fields: [cvThequeCritereId], references: [id], onDelete: Cascade)
}

model CvThequeUser {
  id                Int @id @default(autoincrement())
  score             Int
  userId            Int
  cvThequeCritereId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  cvThequeCritere CvThequeCritere @relation(fields: [cvThequeCritereId], references: [id], onDelete: Cascade)

  @@unique([userId, cvThequeCritereId])
}

model CvThequeContact {
  id          Int    @id @default(autoincrement())
  type        String
  date        String
  hour        Int
  minute      Int
  message     String
  status      String @default("sent")
  userId      Int
  recruiterId Int
  cvMinuteId  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(name: "UserCvThequeContact", fields: [userId], references: [id], onDelete: Cascade)
  recruiter User     @relation(name: "RecruiterCvThequeContact", fields: [recruiterId], references: [id], onDelete: Cascade)
  cvMinute  CvMinute @relation(fields: [cvMinuteId], references: [id], onDelete: Cascade)

  cvThequeContactViews CvThequeContactView[]

  @@unique([recruiterId, cvMinuteId])
}

model CvThequeContactView {
  id                Int @id @default(autoincrement())
  count             Int
  userId            Int
  cvThequeContactId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  cvThequeContact CvThequeContact @relation(fields: [cvThequeContactId], references: [id], onDelete: Cascade)
}
